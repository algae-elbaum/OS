       	       	    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kyle Seipp kseipp@caltech.edu
Henry Elbaum helbaum@caltech.edu
Bianca Ray Avalani brayaval@caltech.edu

>> Specify how many late tokens you are using on this assignment: 
4 

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: login.cms.caltech.edu:/cs/courses/cs124/teams/ComedicLuddites 
   commit ... 6e19c35b541bb1ca96f0b26a64432377a52d0a82

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.


Kyle ~25
Henry 23
Bianca 25

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Kyle: Supplemental Page Table. pair programming with henry on frame table, concurrency, clock_algorithm on eviciton, mmap, munmap syscalls
Henry: Frame table, eviction minus the swapping out/writing to files, stack
       extension, reading in from mmapped pages on pagefault, page reclamation
Bianca: writing out frames/pages to file or to swap. Helped with supplemental page
        table stuff and general debugging. Helped with eviction implementation; wrote
        swapping stuff out and back in.

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

For managing concurrent suppl_page_table access
extern struct lock suppl_lock;

For swapping executable stuff correctly:
enum ELF_type {
  not_ELF,
  nonfaulted_ELF,
  faulted_ELF
};

Entries in the suppl_page_table:
typedef struct suppl_page
{
   /* We have some extra information that we need to keep track of for 
      each page that we use. */
   bool read_only;
   enum ELF_type elf_status;
   const void *vaddr; // user virtual address of the page
   const void *kaddr;
   int swap_index; // Must be initialized to -1 when a new suppl_page is made
   char file_name[14]; // If we want to use the anonymous file, then we can call it ""
   unsigned file_offset;
   unsigned bytes_to_read;
   struct hash_elem hash_elem; 
   // suppl_pages need to be part of a hash table so that we can get things out
   struct list_elem elem; // Pages are part of maps and we need to hold onto
                          // which ones belong to which maps.  
} suppl_page;


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

I don't think we have code that does that. What would it be for?
Basically everything we do involves there not being a frame with the
data (pagefaults), working with the frame directly (eviction), or
setting up suppl_pages that don't have to think about frames until
the get pagefaulted at (initial setup, mmap)

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Mostly unimplemented; currently, if a user process talks to a page, then it dirties the address in user and the kernel
address. If the kernel dirties something it only dirties the kernel address.
This might cause problens.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We should do this in a single lock. Uhh, we didn't actually implement this.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

A hash table implementation is given to us and it allows us to easily map
virtual mem to physical mem.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct frame_entry
{
    void *kaddr; // Point to the kernel address of the frame
    struct thread *holding_thread; // The thread that's using this frame 
    void *upage;  // The user page the frame is put into
    struct list_elem elem; // We want to use the clock algorithm, so we need a queue of frames
} frame_entry;

To be the entries of the fram_table queue

// IAMA frame table.
static frame_entry frame_table[NUM_FRAMES] = {{0}};

We need an array of the frames to do framey things with it.

struct list frame_clock_queue;

This is the queue to do the eviction policy.


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We have a queue of all of the frames. And we choose the first frame that
is clean. A frame that is dirty is sent ot the back of the queue and set to clean
This means that we will eventually find a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When Q lost the frame to eviction, the frame table entry was cleared,
the frame was removed from Q's pagedir mapping, and if swapping gets 
working it'll have written out any changes to the frame. Then when
P gets the frame, a frame table entry is made for it with P's info,
P's pagedir is updated to have the frame, and the frame is filled with
the appropriate data (at least, it gets the right data if the data
should be zeros or from a file. If swapping gets done, it'll also have
that)

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

If it's a a valid user addr and is above esp-64 then we extend the stack.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We did not finish concurrency. We have locks for the filesys and for
the suppl_page table. We should have another one for the frame table, but
didn't finish setting it up.
We make sure to always nest the locks. If we have code that will use 
both files and the suppl_page table, we made sure that the file accesses always are
nested inside. This prevents deadlock because no process can be waiting for
resource A while holding B deadlocking with a process that has B and wants A because
that state is impossible. No one can hold B without already having A, or not wanting A.

We should make more complex structures to figure out how to allow simaltaneous reads
and to allow reads on some parts while writing to others. We recognize that this
exists, but did not have time to implement it.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We should use something smart to prevent the latter possiblity.
We were going to make a global frame table lock, or lock each element individually. The 
latter doens't solve this problem and the former would be very. Slow.
However, we only made a lock for the suppl_page table and didn't 
have time to make one for the frame_table.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Reading in from a file requires a lock. Q can evict the frame because we didn't 
write a framte table lock yet. But such a global lock
would prevent anyone from touching the frame table and causing evictions.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We don't have locking frames in physical memory. We just use regular eviction.
This is probably going to cause a problem.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make synchronization
>> easy, but limit parallelism.  On the other hand, using many locks
>> complicates synchronization and raises the possibility for deadlock
>> but allows for high parallelism.  Explain where your design falls
>> along this continuum and why you chose to design it this way.

We chose to have few locks because we ran out of time and fixing deadlocks
is time consuming and unpleasant. It makes the machine run slower naturally
but we are trying to get this project working rather than running quickly.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of  each in 25 words or less.
struct map
{
    mapid_t id;
    struct list_elem elem;
    struct list pages;
};
We need a way to look through all of the maps and find the pages relevant

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Each of the threads has a maps field. This is where we store the map_id.
Once we find the correct map_id, we look through the pages attached to that
map so that we can write all of them back to the file system or swap.
This frees up the space as well as doing the eviction.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We assume that the file being sent in is the beginning of the file and
that the file is aligned correctly. Thus, if it is an overlap, we wouldn't
be paging it in, in the first place. We don't really check for overlaps
in a more sophisticated way.
---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The implementations do not share code (except for the creation of new
suppl_pages). Loading executables involves potentially also making a 
bunch of zeroed pages that shouldn't have a filename associated with
them, and the non zeroed pages need to be marked as from an executable
so the swapping vs reading from file can be done correctly. mmap doesn't
do those things well (at all, really).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

The directions were a bit complicated compared to previous sets. It made
it hard to figure out what exactly to do.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?
I for one dislike the constantly having to use the list struct. Python's
easy-mode list syntax spoils me.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

