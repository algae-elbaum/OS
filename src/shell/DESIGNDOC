			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kyle Seipp kseipp@caltech.edu
Bianca Ray Avalani <brayaval@caltech.edu>
Henry Elbaum helbaum@caltech.edu

>> Specify how many late tokens you are using on this assignment:
1

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.

Multiline commands as long as each line ends with a "\" character
History and up arrow to get previous commands works (readline libary)

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Henry: ~16
Kyle: 13
Bianca: ~12

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Henry: Piping and forking algorithm and implementation, helping build parser
Kyle: Parsing the strings. Stripping whitespace and putting the tokens
into the parsed command struct. multiline comments, history
Bianca: Piping, child spawning, and redirection, freeing parsed commands, command execution

---- DATA STRUCTURES ----
Tokens are space/pipe/inequality symbols/null character delimited substrings
of the command string, except when quotes dictate otherwise.

Subcommands are the individual commands within the whole command

subcommand delimiters are the same as token delimiters except for spaces

struct used:
typedef struct
{
    char *file_in;
    char *file_out;
    char ***commands;
    int num_commands;
} parsed_commands;

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

Parsing consists of building a parsed_commands object. It starts by building members of the object by shoving tokens into object.commands[0] until a
subcommand delimiter comes up (resulting in something like
object.commands[0] = ["a", "arg1", "arg2"]). Then a new subcommand 
is made, which ends up as ["b", "arg1"]. And finally a new subcommand is
made as ["c", "arg1", "arg2", "arg3"]. Then our end of input character is
found, we put NULL into the file_in and file_out parts, and set num_commands=3.
Then when it comes to execing, 2 pipes are made, and we loop over the number of 
processes, spawning a child with each iteration. The children grab the file 
descriptors they want from the pipes they want and put them into stdin and stdout, close
all the pipes they inherited from the shell, and then exec. The shell then gets to the 
end of the for loop (none of the children do since execing doesn't return), where it 
closes all pipes, waits for the children to finish up, and then asks for a new command


>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

Everything is does the same as above, except for that in parsing when a < or >
character is found, the next token is taken to be file_in or file_out respectively.
And after that token is read, either a pipe is seen so the parser know to start
building a new subcommand, or sees our end of input character and finishes the
parsing. Then when it comes to running the commands, the very first and very last
children spawned know to set their stdin and stdout to open(file_in) and
open(file_out) respectively and then close the fd from the open.


---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

In parsing, we set the file_in member of the parsed_commands struct to
"inp.txt", and we set the file_out member to be "out.txt". Then when the
child processes are forked, the children can know if they're supposed to run
the very first or the very last subcommand, so they can know to open file_in
or file_out and dup2 accordingly


>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

After we know how many processes are to be spawned, we make that many pipes, minus
1. Then as each process is spawned, it knows which process it is, so the ith
process takes the i-1th's read end for stdin and the ith's out end for stdout
before execing. In the case of the i=0 and i = num_processes-1 edge cases,
the processes don't try to use pipes that don't exist, but rather redirect
as appropriate.

in the example, shell sets creates int pipes[2][2] full of int[2]s that have
been piped up. Then 'a sets stdout to pipes[0][1], 'b sets stdin to pipes[0][0],
'b sets stdout to pipes[1][1], c sets stdin to pipes[1][0]

After sll the child processes close, the shell closes the pipes

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

The shell keeps track of every child's pid in an array as they're spawned,
so in the example after all all children are spawned there's an array
[pidof(a), pidof(b), pidof(c)]. The shell closes all it's pipes, and then
iterates over the child pids waiting on each of them, and then when all waits
are finished it asks for the next command

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

The shell records the filenames for the file to be redirected in and the file to
be redirected out into, setting them to NULL if there's no such filename given.
Then the first subcommand opens the redirected in file and sets stdin to the
resulting file and then frees the fd from opening (if the filename is NULL, it 
just leaves stdin as stdin). Similarly the last subcommand opens the redirected 
out file and sets stout to the resulting file and then frees the fd from opening 
(and again, if the filename was NULL, nothing is done)

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?

Because they affect the shell itself, if they were put into an external process
we wouldn't get that effect on the shell

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?

The main other design idea we considered involved making a chain of children, each
descended from the one before. The problem of waiting for grandchildren being
impossible was to be solved by making a pipe to the shell process through which
it could be told the pids of all the children, and once it got the right number
of pids it would continuously check to see if they're all running. This is by
itself awful and way less clean than the current implementation, both because
the ipc is a little awkward, and because it makes the failure of pipe creation
messier to deal with. In contrast, the current implementation is simpler and makes
dealing with those kinds of errors cleaner

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

Parsing strings in C is ... unpleasant. Does make me wonder how bash does it
given that they are far more robust.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

