			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kyle Seipp kseipp@caltech.edu
Henry Elbaum helbaum@caltech.edu
bianca Ray Avalani brayaval@caltech.edu

>> Specify how many late tokens you are using on this assignment:  
1

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: login.cms.caltech.edu:/cs/courses/cs124/teams/ComedicLuddites
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We wrote Chess. It has timers. I hear people played this game in 
the olden times when computers were slow and the size of rooms.
For blitz mode, you can capture enemy kings rather than merely checkmating
them.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

wiki.osdev, stack exchange

			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

   Bianca: 13.5
   Henry: 15
   Kyle: 12

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
Kyle: Wrote preliminary code for interrupts, and keyboard. Worked on printing.
Wrote parts of the chess game. Wrote timers.

Bianca: Wrote and debugged parts of the chess game, helped with the timer
/ interrupt code

Henry: Bootloader, interrupts, helped display board correctly and debug the game

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

Plays chess, using keyboard to make moves and with a chess timer implemented

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?
The user types numbers to order his/her troops into battle. You input the numbers
and of a start square and an end square to make a move if it is valid. The user should
try to capture the opposing player's king before their timer runs out. Note that this
game is multiplayer only.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.
The game has a board as global state, as well as the timers for both players.
The board contains what all of the pieces are and their information ie color, class, location, etc.
The timers start at 30 minutes and tick downwards once a move has been played based 
on who's turn it is.
The game has a 2-d array of pieces as global state, as well as timers.
Pieces are struct objects storing identity, color, and character to display

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?
When a keyboard interrupt is fired, we push the data into a circular queue.
The keyboard interrupt gets the scancode for the key event, and puts the associated
character into the character buffer if it is one we're interested in.
When a timer interrupt is fired, we add one to a global variable in the handler.
The timer interrupt handler calls a c function that increments a static value
until it hits a particular value, and when it hits that value it's set to 0
and a function in game is called that decrements the timer for the player that
is currently in it's move


>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?
We poll for key input, in that every time round the main loop we ask the character
buffer whether it has a character for us. However, the timer interrupt will still
fire and decrease the timers regularly.

---- RATIONALE ----

>> A6: Why did you choose the project you did?

We chose Chess because it would be possible to do in both text mode, and pixel mode.
In addition, we all knew more or less how the pieces move/interact, and it seemed fairly
logical. 
We considered tic-tac-toe or go as well, but chess seemed a lot more interesting

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)

Chess timers meant that all our timer needed to do was signal another function 
every second.
Since we were able to print everything with text for the board, our video functions
let us print chars, strings and ints to specific locations on the screen.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?

No. Standard libraries may have helped with string printing, but implementing
short versions wasn't too difficult.
Closest we came to something like that was that the circular queue required
a little extra thought to implement without dynamic memory since we didn't
have malloc
			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?
We just push the appropriate fields directly onto the stack and point 
the interrupt at that memory. It doesn't get reclaimed since we don't
care too much about saving memory, so we just let it sit where we made
it forever

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?
no

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?
In one big load, we read in the maximum amount of memory we can before 
overwriting the video buffer.


>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)
no


			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)
We stay in text mode. The video buffer starts at 0xB8000.
Data is passed in as pairs of integers. The first represents the letter, 
and the second the color (the different nibbles being used to give background
and foreground color).

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.
No, but it does have functions. These functions print integers, chars
and strings to specific locations on the screen. This lets us print
the prompts, timers and the board itself.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
Higher level code can access the video buffer directly, but shouldn't. There are
a few helper functions. One clears the screen, another allows us to print 
single characters to any position on the screen, and a third allows us
to print a string starting at any point on the screen. It does not give us
fine tuned control like printing specific characters does, but it is nicer
when we need to print labels and strings.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?
Yes. Since we were writing chess, the '_' charcter with black or white
backgrounds allows us to display the chess board. The "pieces" are either Light 
Blue or Green to represent which player they belong to. The labels on the board
and the timers are colored in other colors to represent that they are not part of the
board nor owned by a player. For similar reasons, errors (for invalid moves, etc.)
are displayed in red.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
There is a single global counter variable. When it hits 50, we know a second has 
passed, so we reset it to 0 and send a signal to the main function using the
decrement timer function.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The timer code calls the decrement_timer function of game.c. That function 
determines who's turn it is. Depending on who's turn it is, the global
turn timer counter decrements. 

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?
Not intentionally. However, based on emperical evidence, the timer is at 50 Hz.
We don't need precise timing, so it doesn't really matter as long as we can 
be precise to 1 second.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?

Whenever we want to know what the current time is, we need to disable interrupts
to prevent the timer interrupt being called during the check. We do this
by only checking the timers by using the get_timer1 and 2 functions which
disable and reenable interrupts.

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
We store the keypresses and releases in a statically allocated circular queue. 
It stores 100 bytes

>> E2: How do your data structures handle keys with multi-byte scan-codes?
When we get a multibyte scan code, it doesn't match with any of the scan codes
we care about (the set of which is hardcoded in), so the nothing is put in the
queue.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The main program accesses the key queue via a pop function, and it initializes
the key handler via init_keyboard

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.
The handler maps the scancodes to chars with a hardcoded switch statement,
with all scancodes except for the set we explicitly care about being mapped
to '\0'. Then if the result is not '\0' it is pushed onto the queue

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?
Interrupts are disabled before any access to the queue and reenabled after
so that the queue can't change in the middle of an access. There's no risk
of simultaneous pushes or pops

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?
The key handler only affects the key queue, and pushes and pops are the only
other access to the queue, and since there can be no interrupts handled while
those are being called, there's no risk of race conditions

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?
It's a simple system with constant memory usage for buffering queues, and
it makes it simple for the game to retrieve the most recent pressed char that
it cares about


			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
I'm glad we were told to zero out the interrupt descriptor table.

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

