                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Henry Elbaum  helbaum@caltech.edu
Bianca Ray Avalani brayaval@caltech.edu
Kyle Seipp kseipp@caltech.edu

>> Specify how many late tokens you are using on this assignment:  
1

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

               USER PROGRAMS
               =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Henry: 27 (roughly, didn't keep super good track of it)
Bianca: 17-19ish?
Kyle: 15 ish

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Henry: Arguments for commands, syscall switch table, most file syscalls,
       changes to the thread struct to help file syscalls, helped design
       of process_wait, helped debugging

Bianca: Checking if pointers are valid, implementing that for syscalls,
        denying writes to executables, helped debugging

Kyle: Syscalls that weren't relating to files. Syscall_wait, debugging, more syscall silliness with whitepsace
                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

I changed process execute to use only the first token for the filename and
still pass a copy of the whole command line as aux. Then start_process still
gets the whole command as it's input. It tokenizes the command, and as it does
so it copies the tokens into the process stack and records the pointers to each
token in the process stack. After that it pushes the sentinel null pointer into
the user stack, then the pointers to the args, with the last one in argv first
and the first in in argv last. Then argv and argc and a pointer to a placeholder
function, and then that's all the pushes and the code can keep running as it did
before.
Nothing was done to avoid overflowing. At least for now I feel comfortable letting
process explode when it has such big args that it fills a page, so the pagefault
handler should just kill the process.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Strtok_r has an argument that tells it where in the string to look for tokens.
This makes it more thread-safe and more likely to avoid race conditions than
strtok because that stores the location in the string in a static pointer 
instead of having it passed in.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) Having the shell do this externally instead of the kernel makes it less
expensive to do things like, for example, looking for the file
especially since the shell maintains a path variable. This is less
expensive than the kernel doing the same thing while a process gets
initialized.
2) Having the shell parse the command line instead of the kernel is safer
because if the command line is incorrect, it will be caught before it hits
the kernel and thus makes the kernel's job simpler and avoids potentially
unsafe commands/operations.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread {
    /*! Owned by thread.c. */
    /**@{*/
    tid_t tid;                          /*!< Thread identifier. */
    enum thread_status status;          /*!< Thread state. */
    char name[16];                      /*!< Name (for debugging purposes). */
    uint8_t *stack;                     /*!< Saved stack pointer. */
    int priority;                       /*!< Priority. */
    struct list_elem allelem;           /*!< List element for all threads list. */
    /**@}*/

    struct file *open_files[MAX_FILES];

    /*! Shared between thread.c and synch.c. */
    /**@{*/
    struct list_elem elem;              /*!< List element. */
    struct list children;               // List of the children of a thread. actually threads
    struct list_elem child_of;
    struct thread * parent; //this thread's parent
    bool completed;                     // If this thread has terminated. might be subsumed by status
    bool used;                          // If we have already been reaped
    tid_t blocked_on; // if we are blocked on a child, this is what it is. err its tid
    int exit_val; // This is the value that we are on exit.
    /**@}*/

#ifdef USERPROG
    /*! Owned by userprog/process.c. */
    /**@{*/
    uint32_t *pagedir;                  /*!< Page directory. */
    /**@{*/
#endif

    /*! Owned by thread.c. */
    /**@{*/
    unsigned magic;                     /* Detects stack overflow. */
    /**@}*/
};

Threads now can look at their children so syscall_wait works

enum thread_status {
    THREAD_RUNNING,     /*!< Running thread. */
    THREAD_READY,       /*!< Not running but ready to run. */
    THREAD_BLOCKED,     /*!< Waiting for an event to trigger. */
    THREAD_DYING,        /*!< About to be destroyed. */
    THREAD_WAITING      // This means that the thread is over, but its parent waits on it
};

We add another status so that a dead thread can still have its status reaped by the parent.

static struct lock filesys_lock;

This lets us lock the file system so that we don't have synchronization issues.
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
Each process has its own array of MAX_FILES file descriptors in the 
process struct. A single file descriptor value will mean different
things for different processes.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When a process terminates it checks whether its parent is still alive. If it is, then the status is set to waiting. Since it isn't ready, it won't be scheduled again. However, the scheudler won't free the system resources for the thread, but will clean up the page table and open files etc. When a parent tries to wait on a process, it checks if the process is WAITING. If it is, then we can get the exit status. If it isn't then we block the parent. If the parent of a child isn't alive, then we can just do the normal thing and set the status to DYING. The scheduler will deal with cleaning up all of the resources.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Threads that are done have their pages reclaimed. The actual page struct is killed by the scheduler when the thread is set to DYING. This occurs when a child dies with no parent left, and/or when a parent dies the children are reaped. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

uhh we don't.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We block on the parent when it waits. If C exits first it stays as a WAITING stsatus to get reaped. Otherwise it goes to get freeed by process_exit and by the scheduler bc it is DYING. When a parent dies the dead children get reaped and set to DYING as normal. There shouldn't be any special cases.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't.

              SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

Is there a way to make gdb suck less for this sort of project? There were times when I would have a thread paused and then another thread would do something causing a kernel panic. This meant that I couldn't investigate the proper thread.

